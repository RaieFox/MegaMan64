func_800A37A4_7EBA4 = 0x800A37A4;
osTvType = 0x80000300; // (initialize, false)
osRomBase = 0x80000308; // (pirawdma, false)
osResetType = 0x8000030C; // (initialize, false)
osAppNMIBuffer = 0x8000031C; // (initialize, false)
Main_ClearMemory = 0x80025DD0;
Main_ThreadEntry = 0x80026930;
PadMgr_ThreadEntry = 0x80026BD0;
Overlay_Loader = 0x80027388; // 
bootproc = 0x80089FD0;
Idle_InitVideo = 0x80091F20;
Video_ThreadEntry = 0x800925d8;
Graph_ThreadStop = 0x80087570;
osSetTime = 0x800930A0; // size:0x14 (settime, true)
osSetIntMask = 0x80094460; // (sched, false)
osCreatePiManager = 0x80094500; // size:0x190 (pimgr, true)
__osEPiRawStartDma = 0x80094690; // size:0x1EC (epirawdma, true)
osEPiStartDma = 0x80094880; // size:0x94 (epidma, true)
osCartRomInit = 0x80094920; // size:0x178 (cartrominit, true)
__osDevMgrMain = 0x80094AA0; // size:0x3B8 (devmgr, true)
__osPiCreateAccessQueue = 0x80094E60; // (pimgr, false)
__osPiGetAccess = 0x80094EB4; // (cartrominit, false)
__osPiRelAccess = 0x80094F20; // (cartrominit, false)
osPiStartDma = 0x80094F50; // size:0xA8 (pidma, true)
osFlashInit = 0x80095000; // size:0x110 (flashinit, true)
osFlashReadId = 0x80095110; // size:0xF8 (flashreadid, true)
osFlashAllErase = 0x80095210; // size:0x140 (flashallerase, true)
osFlashSectorErase = 0x80095350; // size:0x144 (flashsectorerase, true)
osFlashWriteBuffer = 0x800954A0; // size:0x98 (flashwritebuffer, true)
osFlashWriteArray = 0x80095540; // size:0x150 (flashwritearray, true)
osFlashReadArray = 0x80095690; // size:0x1A4 (flashreadarray, true)
osAiGetLength = 0x80095840; // size:0x10 (aigetlen, true)
osAiGetStatus = 0x80095850; // size:0x10 (aigetstat, true)
osAiSetFrequency = 0x80095860; // size:0x118 (aisetfreq, true)
osAiSetNextBuffer = 0x80095980; // size:0x94 (aisetnextbuf, true)
_init_lpfilter = 0x80095A20; // size:0xA4 (drvrnew, true)
alFxNew = 0x80095AC4; // size:0x498 (drvrnew, true)
alEnvmixerNew = 0x80095F5C; // size:0xB8 (drvrnew, true)
alLoadNew = 0x80096014; // size:0xB0 (drvrnew, true)
alResampleNew = 0x800960C4; // size:0x8C (drvrnew, true)
alAuxBusNew = 0x80096150; // size:0x5C (drvrnew, true)
alMainBusNew = 0x800961AC; // size:0x5C (drvrnew, true)
alSaveNew = 0x80096208; // size:0x44 (drvrnew, true)
alAdpcmPull = 0x80096250; // size:0x444 (load, true)
alRaw16Pull = 0x80096694; // size:0x39C (load, true)
// = 0x80096979; // (load, false)
alLoadParam = 0x80096A30; // size:0x1AC (load, true)
_decodeChunk = 0x80096BDC; // size:0x178 (load, true)
alAuxBusPull = 0x80096D60; // size:0xDC (auxbus, true)
alAuxBusParam = 0x80096E3C; // size:0x30 (auxbus, true)
alEnvmixerPull = 0x80096E70; // size:0x500 (env, true)
// = 0x800972CF; // (env, false)
alEnvmixerParam = 0x80097370; // size:0xD4 (env, true)
_pullSubFrame = 0x80097444; // size:0x2D4 (env, true)
// = 0x800975B1; // (env, false)
_frexpf = 0x80097718; // size:0xE0 (env, true)
// = 0x80097791; // (env, false)
_ldexpf = 0x800977F8; // size:0x24 (env, true)
_getRate = 0x8009781C; // size:0x280 (env, true)
_getVol = 0x80097A9C; // size:0x84 (env, true)
alFilterNew = 0x80097B20; // size:0x1C (filter, true)
alMainBusPull = 0x80097B40; // size:0x140 (mainbus, true)
alMainBusParam = 0x80097C80; // size:0x30 (mainbus, true)
alResamplePull = 0x80097CB0; // size:0x1EC (resample, true)
alResampleParam = 0x80097E9C; // size:0xC0 (resample, true)
alFxPull = 0x80097F60; // size:0x374 (reverb, true)
alFxParam = 0x800982D4; // size:0x14 (reverb, true)
alFxParamHdl = 0x800982E8; // size:0x1F0 (reverb, true)
// = 0x8009837A; // (reverb, false)
_loadOutputBuffer = 0x800984D8; // size:0x218 (reverb, true)
// = 0x8009850C; // (reverb, false)
// = 0x80098620; // (reverb, false)
_loadBuffer = 0x800986F0; // size:0x170 (reverb, true)
// = 0x80098734; // (reverb, false)
// = 0x800987A9; // (reverb, false)
_saveBuffer = 0x80098860; // size:0x170 (reverb, true)
_filterBuffer = 0x800989D0; // size:0x9C (reverb, true)
_doModFunc = 0x80098A6C; // size:0x8C (reverb, true)
alSavePull = 0x80098B00; // size:0xA8 (save, true)
alSaveParam = 0x80098BA8; // size:0x28 (save, true)
alInit = 0x80098BD0; // size:0x2C (sl, true)
alClose = 0x80098BFC; // size:0x30 (sl, true)
alLink = 0x80098C2C; // size:0x20 (sl, true)
alUnlink = 0x80098C4C; // size:0x30 (sl, true)
alHeapInit = 0x80098C80; // size:0x34 (heapinit, true)
alHeapDBAlloc = 0x80098CC0; // size:0x48 (heapalloc, true)
alCopy = 0x80098D10; // size:0x34 (copy, true)
alSynNew = 0x80098D50; // size:0x2CC (synthesizer, true)
alAudioFrame = 0x8009901C; // size:0x1B0 (synthesizer, true)
// = 0x800990E0; // (synthesizer, false)
// = 0x8009914F; // (synthesizer, false)
// = 0x800991BE; // (synthesizer, false)
__allocParam = 0x800991CC; // size:0x2C (synthesizer, true)
__freeParam = 0x800991F8; // size:0x18 (synthesizer, true)
_collectPVoices = 0x80099210; // size:0x54 (synthesizer, true)
_freePVoice = 0x80099264; // size:0x40 (synthesizer, true)
_timeToSamplesNoRound = 0x800992A4; // size:0x48 (synthesizer, true)
_timeToSamples = 0x800992EC; // size:0x4C (synthesizer, true)
__nextSampleTime = 0x80099338; // size:0x54 (synthesizer, true)
alSynDelete = 0x80099390; // size:0x8 (syndelete, true)
alSynAllocFX = 0x800993A0; // size:0x94 (synallocfx, true)
osInvalDCache = 0x80099440; // (flashreadid, false)
osInvalICache = 0x800994F0; // (initialize, false)
osWritebackDCache = 0x80099570; // (initialize, false)
osWritebackDCacheAll = 0x800995F0; // (sched, false)
osContStartQuery = 0x80099620; // size:0x80 (contquery, true)
osContGetQuery = 0x800996A0; // size:0x20 (contquery, true)
osContStartReadData = 0x800996C0; // size:0x88 (contreaddata, true)
osContGetReadData = 0x80099748; // size:0x9C (contreaddata, true)
// = 0x8009979B; // (contreaddata, false)
__osPackReadData = 0x800997E4; // size:0xB8 (contreaddata, true)
osContInit = 0x800998A0; // size:0x19C (controller, true)
// = 0x800999D5; // (controller, false)
__osContGetInitData = 0x80099A3C; // size:0xB4 (controller, true)
// = 0x80099A5C; // (controller, false)
__osPackRequestData = 0x80099AF0; // size:0xBC (controller, true)
osVirtualToPhysical = 0x80099BB0; // size:0x54 (virtualtophysical, true)
__cosf = 0x80099C10; // size:0x150 (cosf, true)
coss = 0x80099D60; // size:0x28 (coss, true)
__sinf = 0x80099D90; // size:0x1A0 (sinf, true)
sins = 0x80099F30; // size:0x54 (sins, true)
bcopy = 0x80099F90; // (contpfs, false)
bzero = 0x8009A2B0; // (cartrominit, false)
strchr = 0x8009A350; // size:0x40 (string, true)
strlen = 0x8009A390; // size:0x24 (string, true)
memcpy = 0x8009A3B4; // size:0x28 (string, true)
sprintf = 0x8009A3E0; // size:0x58 (sprintf, true)
proutSprintf = 0x8009A438; // size:0x34 (sprintf, true)
osCreateMesgQueue = 0x8009A470; // size:0x24 (createmesgqueue, true)
osJamMesg = 0x8009A4A0; // size:0x134 (jammesg, true)
osRecvMesg = 0x8009A5E0; // size:0x124 (recvmesg, true)
osSendMesg = 0x8009A710; // size:0x130 (sendmesg, true)
osSetEventMesg = 0x8009A840; // size:0xAC (seteventmesg, true)
osSpTaskLoad = 0x8009A8F0; // size:0x20C (sptask, true)
osSpTaskStartGo = 0x8009AAFC; // size:0x2C (sptask, true)
osSpTaskYield = 0x8009AB30; // size:0x1C (sptaskyield, true)
osSpTaskYielded = 0x8009AB50; // size:0x4C (sptaskyielded, true)
osCreateScheduler = 0x8009ABA0; // size:0x148 (sched, true)
osScAddClient = 0x8009ACE8; // size:0x58 (sched, true)
osScRemoveClient = 0x8009AD40; // size:0x90 (sched, true)
osScGetCmdQ = 0x8009ADD0; // size:0x8 (sched, true)
__scMain = 0x8009ADD8; // size:0x104 (sched, true)
// = 0x8009AE0D; // (sched, false)
// = 0x8009AECD; // (sched, false)
__scHandleRetrace = 0x8009AEDC; // size:0x100 (sched, true)
// = 0x8009AF81; // (sched, false)
__scHandleRSP = 0x8009AFDC; // size:0xF0 (sched, true)
// = 0x8009B02C; // (sched, false)
// = 0x8009B095; // (sched, false)
__scHandleRDP = 0x8009B0CC; // size:0x90 (sched, true)
// = 0x8009B0D7; // (sched, false)
__scTaskReady = 0x8009B15C; // size:0x54 (sched, true)
// = 0x8009B173; // (sched, false)
// = 0x8009B19D; // (sched, false)
__scTaskComplete = 0x8009B1B0; // size:0x8C (sched, true)
__scAppendList = 0x8009B23C; // size:0x58 (sched, true)
__scExec = 0x8009B294; // size:0xD0 (sched, true)
__scYield = 0x8009B364; // size:0x38 (sched, true)
__scSchedule = 0x8009B39C; // size:0x214 (sched, true)
__osSiRawStartDma = 0x8009B5B0; // size:0xA4 (sirawdma, true)
__osSiCreateAccessQueue = 0x8009B660; // (controller, false)
__osSiGetAccess = 0x8009B6B4; // (contquery, false)
__osSiRelAccess = 0x8009B720; // (contquery, false)
osCreateThread = 0x8009B750; // size:0xD0 (createthread, true)
osDestroyThread = 0x8009B820; // size:0xD8 (destroythread, true)
osGetThreadPri = 0x8009B900; // size:0x18 (getthreadpri, true)
osSetThreadPri = 0x8009B920; // size:0xC8 (setthreadpri, true)
osStartThread = 0x8009B9F0; // size:0x118 (startthread, true)
osStopThread = 0x8009BB10; // size:0xB4 (stopthread, true)
__osDequeueThread = 0x8009BBD0; // size:0x34 (thread, true)
osYieldThread = 0x8009BC10; // size:0x48 (yieldthread, true)
osGetTime = 0x8009BC60; // size:0x84 (gettime, true)
osSetTimer = 0x8009BCF0; // size:0x12C (settimer, true)
__osTimerServicesInit = 0x8009BE20; // size:0x54 (timerintr, true)
__osTimerInterrupt = 0x8009BE74; // size:0x13C (timerintr, true)
// = 0x8009BF4C; // (timerintr, false)
// = 0x8009BFAC; // (timerintr, false)
__osSetTimerIntr = 0x8009BFB0; // size:0x80 (timerintr, true)
__osInsertTimer = 0x8009C030; // size:0x108 (timerintr, true)
__osProbeTLB = 0x8009C140; // (virtualtophysical, false)
osUnmapTLBAll = 0x8009C200; // (initialize, false)
osViGetCurrentFramebuffer = 0x8009C250; // (sched, false)
osViGetNextFramebuffer = 0x8009C290; // (sched, false)
osCreateViManager = 0x8009C2D0; // size:0x1A0 (vimgr, true)
viMgrMain = 0x8009C470; // size:0x198 (vimgr, true)
osViSetEvent = 0x8009C610; // size:0x58 (visetevent, true)
osViSetMode = 0x8009C670; // size:0x4C (visetmode, true)
osViSetSpecialFeatures = 0x8009C6C0; // size:0x164 (visetspecial, true)
osViSetYScale = 0x8009C830; // size:0x44 (visetyscale, true)
osViSwapBuffer = 0x8009C880; // size:0x44 (viswapbuf, true)
__osViSwapContext = 0x8009C8D0; // size:0x308 (viswapcontext, true)
osViBlack = 0x8009CBE0; // size:0x5C (viblack, true)
__osMotorAccess = 0x8009CD80; // size:0x144 (motor, true)
osMotorInit = 0x8009CEC4; // size:0x248 (motor, true)
osPfsAllocateFile = 0x8009D110; // size:0x30C (pfsallocatefile, true)
// = 0x8009D359; // (pfsallocatefile, false)
__osPfsDeclearPage = 0x8009D41C; // size:0x118 (pfsallocatefile, true)
osPfsDeleteFile = 0x8009D540; // size:0x1AC (pfsdeletefile, true)
// = 0x8009D681; // (pfsdeletefile, false)
__osPfsReleasePages = 0x8009D6EC; // size:0x68 (pfsdeletefile, true)
alHeapCheck = 0x8009D74C; // size:0x8 (heapcheck, true)
osPfsReadWriteFile = 0x8009D760; // size:0x440 (pfsreadwritefile, true)
osPfsFileState = 0x8009DBA0; // size:0x194 (pfsfilestate, true)
osPfsFindFile = 0x8009DD40; // size:0x1B8 (pfssearchfile, true)
osPfsFreeBlocks = 0x8009DF00; // size:0x10C (pfsfreeblocks, true)
osPfsNumFiles = 0x8009E010; // size:0x100 (pfsnumfiles, true)
osPfsInitPak = 0x8009E110; // size:0x1F8 (pfsinitpak, true)
// = 0x8009E28A; // (pfsinitpak, false)
__osPfsCheckRamArea = 0x8009E308; // size:0xCC (pfsinitpak, true)
osPfsRepairId = 0x8009E3E0; // size:0x58 (pfsrepairid, true)
__osPfsGetStatus = 0x8009E440; // size:0xF0 (pfsgetstatus, true)
// = 0x8009E4F4; // (pfsgetstatus, false)
__osPfsRequestOneChannel = 0x8009E530; // size:0x94 (pfsgetstatus, true)
// = 0x8009E563; // (pfsgetstatus, false)
__osPfsGetOneChannelData = 0x8009E5C4; // size:0x80 (pfsgetstatus, true)
__osPfsSelectBank = 0x8009E650; // size:0x64 (pfsselectbank, true)
__osSumcalc = 0x8009E6C0; // size:0x34 (contpfs, true)
__osIdCheckSum = 0x8009E6F4; // size:0x44 (contpfs, true)
// = 0x8009E71A; // (contpfs, false)
__osRepairPackId = 0x8009E738; // size:0x2EC (contpfs, true)
// = 0x8009E94B; // (contpfs, false)
__osCheckPackId = 0x8009EA24; // size:0x164 (contpfs, true)
__osGetId = 0x8009EB88; // size:0x1CC (contpfs, true)
__osCheckId = 0x8009ED54; // size:0xB8 (contpfs, true)
__osPfsRWInode = 0x8009EE0C; // size:0x338 (contpfs, true)
__osContRamRead = 0x8009F150; // size:0x1E8 (contramread, true)
__osContRamWrite = 0x8009F340; // size:0x204 (contramwrite, true)
osAfterPreNMI = 0x8009F5B0; // size:0x1C (afterprenmi, true)
__createSpeedParam = 0x8009F5D0; // size:0xB8 (initialize, true)
__osInitialize_common = 0x8009F688; // size:0x2D8 (initialize, true)
__osInitialize_autodetect = 0x8009F960; // size:0x8 (initialize, true)
// = 0x8009F970; // (exceptasm, false)
__osExceptionPreamble = 0x8009F970; // (initialize, false)
// = 0x8009FD99; // (exceptasm, false)
// = 0x8009FF13; // (exceptasm, false)
// = 0x8009FF49; // (exceptasm, false)
__osEnqueueAndYield = 0x8009FFEC; // (jammesg, false)
__osEnqueueThread = 0x800A00F4; // (setthreadpri, false)
__osPopThread = 0x800A013C; // (jammesg, false)
__osDispatchThread = 0x800A0154; // (destroythread, false)
__osCleanupThread = 0x800A02D0; // (createthread, false)
__osDisableInt = 0x800A02E0; // (cartrominit, false)
__osRestoreInt = 0x800A0350; // (cartrominit, false)
__osSetGlobalIntMask = 0x800A0370; // size:0x40 (setglobalintmask, true)
__osResetGlobalIntMask = 0x800A03B0; // size:0x48 (resetglobalintmask, true)
__osPiRawStartDma = 0x800A0400; // size:0xD0 (pirawdma, true)
osPiGetCmdQueue = 0x800A04D0; // size:0x20 (pigetcmdq, true)
__osEPiRawReadIo = 0x800A04F0; // size:0x168 (epirawread, true)
__osEPiRawWriteIo = 0x800A0660; // size:0x164 (epirawwrite, true)
osEPiWriteIo = 0x800A07D0; // (flashallerase, false)
osEPiReadIo = 0x800A0830; // (flashallerase, false)
osEPiLinkHandle = 0x800A0890; // size:0x44 (epilinkhandle, true)
__osFlashGetAddr = 0x800A08E0; // size:0x1C (flashgetaddr, true)
osFlashReadStatus = 0x800A0900; // size:0x9C (flashreadstatus, true)
osFlashClearStatus = 0x800A09A0; // size:0x54 (flashclearstatus, true)
__osAiDeviceBusy = 0x800A0A00; // size:0x14 (ai, true)
bcmp = 0x800A0A20; // (contpfs, false)
_Printf = 0x800A0B30; // size:0x580 (xprintf, true)
// = 0x800A0F50; // (xprintf, false)
_Putfld = 0x800A10B0; // size:0x4D0 (xprintf, true)
osDpSetNextBuffer = 0x800A1580; // size:0x98 (dpsetnextbuf, true)
__osGetCause = 0x800A1620; // (initialize, false)
osGetCount = 0x800A1630; // (contpfs, false)
__osGetSR = 0x800A1640; // (initialize, false)
__osSetCompare = 0x800A1650; // (timerintr, false)
__osSetFpcCsr = 0x800A1660; // (initialize, false)
__osSetSR = 0x800A1670; // (initialize, false)
__osSetWatchLo = 0x800A1680; // (initialize, false)
__osSpDeviceBusy = 0x800A1690; // size:0x18 (sp, true)
__osSpGetStatus = 0x800A16B0; // size:0x10 (spgetstat, true)
__osSpSetStatus = 0x800A16C0; // size:0x10 (spsetstat, true)
__osSpSetPc = 0x800A16D0; // size:0x30 (spsetpc, true)
__osSpRawStartDma = 0x800A1700; // size:0x8C (sprawdma, true)
__osSiRawReadIo = 0x800A1790; // (initialize, false)
__osSiRawWriteIo = 0x800A17E0; // (initialize, false)
__osContAddressCrc = 0x800A1830; // size:0x6C (crc, true)
__osContDataCrc = 0x800A189C; // size:0x7C (crc, true)
osMapTLBRdb = 0x800A1920; // (initialize, false)
__osViInit = 0x800A1980; // size:0x104 (vi, true)
__osViGetCurrentContext = 0x800A1A90; // (vimgr, false)
osPfsChecker = 0x800A1AA0; // size:0x460 (pfschecker, true)
// = 0x800A1DE8; // (pfschecker, false)
// = 0x800A1EEA; // (pfschecker, false)
corrupted_init = 0x800A1F00; // size:0x158 (pfschecker, true)
corrupted = 0x800A2058; // size:0x168 (pfschecker, true)
osPfsIsPlug = 0x800A21C0; // size:0x17C (pfsisplug, true)
// = 0x800A22DD; // (pfsisplug, false)
__osPfsRequestData = 0x800A233C; // size:0xA4 (pfsisplug, true)
// = 0x800A2358; // (pfsisplug, false)
__osPfsGetInitData = 0x800A23E0; // size:0xB4 (pfsisplug, true)
_Litob = 0x800A24A0; // size:0x250 (xlitob, true)
_Ldtob = 0x800A26F0; // size:0x44C (xldtob, true)
// = 0x800A2A29; // (xldtob, false)
// = 0x800A2A9B; // (xldtob, false)
_Ldunscale = 0x800A2B3C; // size:0x98 (xldtob, true)
_Genld = 0x800A2BD4; // size:0x5A8 (xldtob, true)
__osDpDeviceBusy = 0x800A3180; // size:0x18 (dp, true)
__osSiDeviceBusy = 0x800A31A0; // size:0x18 (si, true)
ldiv = 0x800A31C0; // size:0x84 (ldiv, true)
lldiv = 0x800A3244; // size:0x134 (ldiv, true)
__divdi3 = 0x800A3870; // (ldiv, false)
__udivdi3 = 0x800A39E0; // (initialize, false)
__umoddi3 = 0x800A3A00; // (xlitob, false)
__osCurrentTime = 0x800CF150; // (settime, false)
__osPiDevMgr = 0x800CF220; // (epidma, false)
// = 0x800CF220; // (pimgr, false)
__osPiTable = 0x800CF23C; // (cartrominit, false)
__osCurrentHandle = 0x800CF240; // (epirawdma, false)
// = 0x800CF250; // (cartrominit, false)
__osPiAccessQueueEnabled = 0x800CF260; // (pimgr, false)
// = 0x800CF270; // (aisetnextbuf, false)
// = 0x800CF280; // (drvrnew, false)
// = 0x800CF410; // (env, false)
alGlobals = 0x800CF530; // (env, false)
// = 0x800CF530; // (sl, false)
// = 0x800CF540; // (controller, false)
// = 0x800CF550; // (sins, false)
// = 0x800CFD50; // (seteventmesg, false)
// = 0x800CFD60; // (sched, false)
__osThreadTail = 0x800CFD80; // (createmesgqueue, false)
__osRunQueue = 0x800CFD88; // (exceptasm, false)
__osActiveQueue = 0x800CFD8C; // (createthread, false)
__osRunningThread = 0x800CFD90; // (destroythread, false)
__osFaultedThread = 0x800CFD94; // (exceptasm, false)
__osTimerList = 0x800CFDA0; // (settimer, false)
// = 0x800CFDA0; // (timerintr, false)
// = 0x800CFDB0; // (vimgr, false)
__additional_scanline = 0x800CFDCC; // (viswapcontext, false)
osViModeTable = 0x800CFDD0; // (sched, false)
// = 0x800D0F50; // (contpfs, false)
__osPfsInodeCacheBank = 0x800D0F54; // (pfsgetstatus, false)
// = 0x800D0F60; // (contramread, false)
__osPfsLastChannel = 0x800D0F60; // (contramwrite, false)
// = 0x800D0F70; // (initialize, false)
osViClock = 0x800D0F78; // (aisetfreq, false)
__osShutdown = 0x800D0F7C; // (exceptasm, false)
__OSGlobalIntMask = 0x800D0F80; // (exceptasm, false)
// = 0x800D0F90; // (exceptasm, false)
// = 0x800D0FC0; // (xprintf, false)
// = 0x800D1010; // (vi, false)
__osViCurr = 0x800D1070; // (viswapcontext, false)
__osViNext = 0x800D1074; // (viblack, false)
osViModeNtscLan1 = 0x800D1080; // (vi, false)
osViModePalLan1 = 0x800D10D0; // (vi, false)
osViModeMpalLan1 = 0x800D1120; // (vi, false)
// = 0x800D1170; // (xlitob, false)
__osRcpImTable = 0x800D2F10; // (exceptasm, false)
// = 0x800D2F10; // (setintmask, false)
// = 0x800D2F90; // (devmgr, false)
// = 0x800D2FB0; // (aisetfreq, false)
// = 0x800D2FC0; // (drvrnew, false)
// = 0x800D3000; // (env, false)
// = 0x800D30F0; // (resample, false)
// = 0x800D3120; // (reverb, false)
// = 0x800D3170; // (synthesizer, false)
// = 0x800D3190; // (cosf, false)
// = 0x800D31F0; // (sinf, false)
// = 0x800D3250; // (sched, false)
// = 0x800D3270; // (viswapcontext, false)
// = 0x800D3280; // (exceptasm, false)
__libm_qnan_f = 0x800D32D0; // (cosf, false)
// = 0x800D32E0; // (xprintf, false)
// = 0x800D3460; // (xldtob, false)
// = 0x801916D0; // (pimgr, false)
// = 0x801928B0; // (sptask, false)
// = 0x80192900; // (vimgr, false)
// = 0x80193B20; // (motor, false)
__osFlashVersion = 0x8019A6A0; // size:0x4 (flashinit, true)
__osBaseCounter = 0x8019A7EC; // size:0x4 (timerintr, true)
__osFlashMsg = 0x8019A7F8; // (flashreadid, false)
__osThreadSave = 0x801A5220; // (exceptasm, false)
__osContPifRam = 0x801ACA00; // size:0x40 (controller, true)
__Dom2SpeedParam = 0x801ADB78; // (initialize, false)
__osViIntrCount = 0x801ADD38; // size:0x4 (timerintr, true)
__osFlashID = 0x801BC5A0; // (flashreadid, false)
__osMaxControllers = 0x801D87E9; // size:0x1 (controller, true)
__osFlashMsgBuf = 0x801D8810; // size:0x4 (flashinit, true)
//__osCurrentTime = 0x801D8818; // size:0x8 (timerintr, true)
__CartRomHandle = 0x801D8C80; // size:0x74 (cartrominit, true)
__osPiAccessQueue = 0x801D8D40; // (pimgr, false)
__Dom1SpeedParam = 0x801DBDD8; // (initialize, false)
__osFlashHandler = 0x801FEBF0; // size:0x74 (flashinit, true)
__osContLastCmd = 0x80203FF4; // size:0x1 (controller, true)
__osEepromTimerMsg = 0x80203FF8; // size:0x4 (controller, true)
__osTimerCounter = 0x802047E4; // size:0x4 (timerintr, true)
__osFlashMessageQ = 0x80207850; // size:0x18 (flashinit, true)
__osPfsInodeCache = 0x80210880; // size:0x100 (contpfs, true)
__osEventStateTab = 0x80210AA0; // size:0x78 (seteventmesg, true)
__osFinalrom = 0x80210B58; // size:0x4 (initialize, true)
__osPfsPifRam = 0x80210C70; // size:0x40 (pfsisplug, true)
__osEepromTimerQ = 0x80215738; // size:0x18 (controller, true)